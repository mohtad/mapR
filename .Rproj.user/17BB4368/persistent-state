build-last-errors="[]"
build-last-errors-base-dir="~/mapR/"
build-last-outputs="[{\"output\":\"==> devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))\\n\\n\",\"type\":0},{\"output\":\"Updating mapR documentation\\r\\nLoading mapR\\r\\n\",\"type\":2},{\"output\":\"Writing add_bins.Rd\\r\\nWriting create_map.Rd\\r\\nWriting load_shape_us_roads.Rd\\r\\nWriting load_shape_us_zcta.Rd\\r\\nWriting load_us_zcta.Rd\\r\\nWriting us_zcta_names.Rd\\r\\nWriting NAMESPACE\\r\\n\",\"type\":1},{\"output\":\"Warning messages:\\r\\n1: @return [add_bins.R#4]: requires a value \\r\\n2: @examples [add_bins.R#7]: requires a value \\r\\n3: @examples [create_map.R#14]: requires a value \\r\\n4: @return [load_shape_us_roads.R#4]: requires a value \\r\\n5: @examples [load_shape_us_roads.R#7]: requires a value \\r\\n6: @return [load_shape_us_zcta.R#4]: requires a value \\r\\n7: @examples [load_shape_us_zcta.R#7]: requires a value \\r\\n8: @examples [load_us_zcta.R#7]: requires a value \\r\\n9: @return [us_zcta_names.R#4]: requires a value \\r\\n10: @examples [us_zcta_names.R#7]: requires a value \\r\\n\",\"type\":2},{\"output\":\"Documentation completed\\n\\n\",\"type\":1},{\"output\":\"==> Rcmd.exe INSTALL --no-multiarch --with-keep.source mapR\\n\\n\",\"type\":0},{\"output\":\"* installing to library 'C:/Users/Mohtadi.Nadjar/R/win-library/3.3'\\r\\n\",\"type\":1},{\"output\":\"* installing *source* package 'mapR' ...\\r\\n\",\"type\":1},{\"output\":\"** R\\r\\n\",\"type\":1},{\"output\":\"** preparing package for lazy loading\\r\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"** help\\r\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"*** installing help indices\\r\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"** building package indices\\r\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"** testing if installed package can be loaded\\r\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"* DONE (mapR)\\r\\n\",\"type\":1},{\"output\":\"\",\"type\":1}]"
compile_pdf_state="{\"errors\":[],\"output\":\"\",\"running\":false,\"tab_visible\":false,\"target_file\":\"\"}"
console_procs="[]"
files.monitored-path=""
find-in-files-state="{\"handle\":\"\",\"input\":\"\",\"path\":\"\",\"regex\":false,\"results\":{\"file\":[],\"line\":[],\"lineValue\":[],\"matchOff\":[],\"matchOn\":[]},\"running\":false}"
imageDirtyState="1"
saveActionState="-1"
